// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(BodegaContext))]
    partial class BodegaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Modelo.Ordenes.Bodega", b =>
                {
                    b.Property<int>("BodegaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiudadID")
                        .HasColumnType("int");

                    b.Property<string>("nom_Bodega")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodegaID");

                    b.HasIndex("CiudadID")
                        .IsUnique();

                    b.ToTable("Bodega");
                });

            modelBuilder.Entity("Modelo.Ordenes.Ciudad", b =>
                {
                    b.Property<int>("CiudadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ciudad_Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiudadID");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("Modelo.Ordenes.Cliente", b =>
                {
                    b.Property<int>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteID");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Modelo.Ordenes.Configuracion", b =>
                {
                    b.Property<int>("ConfiguracionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fecha_min_entrega")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfiguracionID");

                    b.ToTable("Configuracion");
                });

            modelBuilder.Entity("Modelo.Ordenes.Configuracion_Penalizacion", b =>
                {
                    b.Property<int>("Configuracion_PenalizacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoID")
                        .HasColumnType("int");

                    b.HasKey("Configuracion_PenalizacionID");

                    b.HasIndex("EstadoID")
                        .IsUnique();

                    b.ToTable("Configuracion_Penalizacions");
                });

            modelBuilder.Entity("Modelo.Ordenes.Estado", b =>
                {
                    b.Property<int>("EstadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom_Estado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoID");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("Modelo.Ordenes.Orden", b =>
                {
                    b.Property<int>("OrdenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<string>("Destino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_de_Despacho")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_de_Solicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int");

                    b.HasKey("OrdenID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("EstadoID");

                    b.HasIndex("ProductoID")
                        .IsUnique();

                    b.ToTable("Orden");
                });

            modelBuilder.Entity("Modelo.Ordenes.Producto", b =>
                {
                    b.Property<int>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodegaID")
                        .HasColumnType("int");

                    b.Property<string>("Nom_Producto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio_Unit")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductoID");

                    b.HasIndex("BodegaID")
                        .IsUnique();

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Modelo.Ordenes.Bodega", b =>
                {
                    b.HasOne("Modelo.Ordenes.Ciudad", "Ciudad")
                        .WithOne("Bodega")
                        .HasForeignKey("Modelo.Ordenes.Bodega", "CiudadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Modelo.Ordenes.Configuracion_Penalizacion", b =>
                {
                    b.HasOne("Modelo.Ordenes.Estado", "Estado")
                        .WithOne("Configuracion_Penalizacion")
                        .HasForeignKey("Modelo.Ordenes.Configuracion_Penalizacion", "EstadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Modelo.Ordenes.Orden", b =>
                {
                    b.HasOne("Modelo.Ordenes.Cliente", "Cliente")
                        .WithMany("Ordenes")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Ordenes.Estado", "Estado")
                        .WithMany("Orden")
                        .HasForeignKey("EstadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Ordenes.Producto", "Producto")
                        .WithOne("Orden")
                        .HasForeignKey("Modelo.Ordenes.Orden", "ProductoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estado");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Modelo.Ordenes.Producto", b =>
                {
                    b.HasOne("Modelo.Ordenes.Bodega", "Bodega")
                        .WithOne("Producto")
                        .HasForeignKey("Modelo.Ordenes.Producto", "BodegaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bodega");
                });

            modelBuilder.Entity("Modelo.Ordenes.Bodega", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Modelo.Ordenes.Ciudad", b =>
                {
                    b.Navigation("Bodega");
                });

            modelBuilder.Entity("Modelo.Ordenes.Cliente", b =>
                {
                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("Modelo.Ordenes.Estado", b =>
                {
                    b.Navigation("Configuracion_Penalizacion");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Modelo.Ordenes.Producto", b =>
                {
                    b.Navigation("Orden");
                });
#pragma warning restore 612, 618
        }
    }
}
